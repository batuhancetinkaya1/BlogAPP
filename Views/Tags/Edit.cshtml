@model BlogApp.Entity.Tag
@using BlogApp.Entity

@{
    ViewData["Title"] = "Etiket Düzenle";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>
    <hr />
    <div class="row">
        <div class="col-md-6">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="TagId" />
                <div class="form-group mb-3">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Url" class="control-label"></label>
                    <input asp-for="Url" class="form-control" />
                    <span asp-validation-for="Url" class="text-danger"></span>
                    <small class="form-text text-muted">Boş bırakırsanız etiket adından otomatik oluşturulacaktır.</small>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Color" class="control-label"></label>
                    <select asp-for="Color" class="form-select" id="Color" required>
                        <option value="">-- Renk Seçin --</option>
                        <option value="@TagColors.Primary">Primary</option>
                        <option value="@TagColors.Secondary">Secondary</option>
                        <option value="@TagColors.Success">Success</option>
                        <option value="@TagColors.Danger">Danger</option>
                        <option value="@TagColors.Warning">Warning</option>
                        <option value="@TagColors.Purple">Purple</option>
                        <option value="@TagColors.Dark">Dark</option>
                        <option value="@TagColors.Orange">Orange</option>
                    </select>
                    <span asp-validation-for="Color" class="text-danger"></span>
                    <div class="mt-2">
                        <span class="badge bg-primary p-2 me-1">Primary</span>
                        <span class="badge bg-secondary p-2 me-1">Secondary</span>
                        <span class="badge bg-success p-2 me-1">Success</span>
                        <span class="badge bg-danger p-2 me-1">Danger</span>
                        <span class="badge bg-warning text-dark p-2 me-1">Warning</span>
                        <span class="badge bg-purple p-2 me-1">Purple</span>
                        <span class="badge bg-orange text-white p-2 me-1">Orange</span>
                        <span class="badge bg-dark text-white p-2 me-1">Dark</span>
                    </div>
                </div>
                <div id="tagPreview" class="form-group mb-3">
                    <label class="control-label">Önizleme</label>
                    <div>
                        <span id="previewBadge" class="badge p-2">@Model.Name</span>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                    <a asp-action="Index" class="btn btn-secondary">Geri Dön</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const nameInput = document.getElementById('Name');
            const colorSelect = document.getElementById('Color');
            const previewBadge = document.getElementById('previewBadge');
            
            function updatePreview() {
                const name = nameInput.value || 'Etiket Önizleme';
                const colorValue = colorSelect.value;
                let colorClass = 'secondary';
                let textClass = 'text-white';
                
                if (colorValue) {
                    const colorText = colorSelect.options[colorSelect.selectedIndex].text.toLowerCase();
                    colorClass = colorText;
                    
                    // Açık renkli etiketler için metin rengini ayarla
                    if (colorClass === 'warning' || colorClass === 'light' || colorClass === 'purple') {
                        textClass = 'text-dark';
                    }
                }
                
                // Önizleme badge sınıfını ve içeriğini güncelle
                previewBadge.className = 'badge bg-' + colorClass + ' ' + textClass + ' p-2';
                previewBadge.textContent = name;
            }
            
            nameInput.addEventListener('input', updatePreview);
            colorSelect.addEventListener('change', updatePreview);
            
            // İlk yükleme
            updatePreview();
        });
    </script>
} 