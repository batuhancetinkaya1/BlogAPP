@using System.Security.Claims
@using BlogApp.Entity
@using BlogApp.Helpers
@model BlogApp.Entity.Post
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = Model?.Title ?? "Blog Yazısı";
    ViewData["Description"] = Model?.Description;
    ViewData["Keywords"] = string.Join(", ", Model?.Tags?.Select(t => t.Name) ?? new List<string>());
    ViewData["Image"] = string.IsNullOrEmpty(Model?.Image) ? "/img/posts/default.jpg" : Model.Image;

    // Get current user ID if authenticated
    int? userId = null;
    if (User.Identity != null && User.Identity.IsAuthenticated)
    {
        string? userIdValue = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userIdValue) && int.TryParse(userIdValue, out int parsedUserId))
        {
            userId = parsedUserId;
        }
    }

    // Get user reaction data
    var userReaction = Model?.Reactions?.FirstOrDefault(r => r.UserId == userId);
    var likesCount = Model?.Reactions?.Count(r => r.IsLike) ?? 0;
    var dislikesCount = Model?.Reactions?.Count(r => !r.IsLike) ?? 0;
    
    // Kullanıcı bilgileri - düzeltilmiş
    var authorImageUrl = Model?.User?.Image ?? "/img/profiles/default.jpg";
    var authorName = Model?.User?.UserName ?? "Bilinmeyen Kullanıcı";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <form id="antiforgeryForm">
                @Html.AntiForgeryToken()
            </form>
            
            <article class="blog-post">
                <header class="mb-4">
                    <h1 class="display-4 mb-3">@(Model?.Title ?? "Yazı yüklenemedi")</h1>
                    
                    <!-- Author information -->
                    <div class="post-meta">
                        <div class="d-flex align-items-center mb-3">
                            <img src="@authorImageUrl" alt="@authorName" class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;">
                            <div>
                                <h6 class="mb-0">
                                    <a href="/users/@(Model?.User?.UserName ?? "#")" class="text-decoration-none">@authorName</a>
                                </h6>
                                <small class="text-muted">@(Model?.CreatedAt.ToString("dd MMM yyyy") ?? "Tarih yok")</small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Post image -->
                    @if (!string.IsNullOrEmpty(Model?.Image))
                    {
                        <img src="@Model.Image" class="img-fluid rounded mb-4" alt="@Model.Title">
                    }
                    else
                    {
                        <img src="/img/posts/default.jpg" class="img-fluid rounded mb-4" alt="Blog görseli">
                    }
                </header>

                <!-- Post content -->
                <div class="blog-content mb-4">
                    @Html.Raw(HtmlSanitizerHelper.Sanitize(Model?.Content ?? ""))
                </div>

                <!-- Video section -->
                @if (!string.IsNullOrEmpty(Model?.VideoUrl))
                {
                    <div class="blog-video mb-4">
                        <div class="ratio ratio-16x9">
                            @{
                                var videoId = "";
                                try {
                                    // Use a more comprehensive regex pattern
                                    var videoUrlRegex = new System.Text.RegularExpressions.Regex(
                                        @"(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})");
                                    var match = videoUrlRegex.Match(Model.VideoUrl ?? "");
                                    
                                    if (match.Success)
                                    {
                                        videoId = match.Groups[1].Value;
                                    }
                                    else if (Model.VideoUrl?.Length == 11 && 
                                             System.Text.RegularExpressions.Regex.IsMatch(Model.VideoUrl, @"^[a-zA-Z0-9_-]{11}$"))
                                    {
                                        // If the URL itself is just an 11-character video ID
                                        videoId = Model.VideoUrl;
                                    }
                                    else if (Model.VideoUrl?.Contains("youtube.com") == true)
                                    {
                                        // Try parsing directly with URL object
                                        try {
                                            var uri = new Uri(Model.VideoUrl);
                                            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                                            videoId = query["v"] ?? "";
                                        }
                                        catch {
                                            // Failed to parse URL
                                        }
                                    }
                                    else if (Model.VideoUrl?.Contains("youtu.be") == true)
                                    {
                                        // Try simple path extraction
                                        try {
                                            var uri = new Uri(Model.VideoUrl);
                                            videoId = uri.AbsolutePath.TrimStart('/');
                                        }
                                        catch {
                                            // Try simple string split
                                            var parts = Model.VideoUrl?.Split('/');
                                            if (parts != null && parts.Length > 0)
                                            {
                                                videoId = parts[parts.Length - 1];
                                            }
                                        }
                                    }
                                    
                                    if (!string.IsNullOrEmpty(videoId))
                                    {
                                        <iframe src="https://www.youtube.com/embed/@videoId" title="YouTube video" allowfullscreen></iframe>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning">
                                            Video bağlantısı tanınamadı: @Model.VideoUrl
                                        </div>
                                    }
                                }
                                catch (Exception ex)
                                {
                                    <div class="alert alert-danger">
                                        Video işlenirken hata oluştu: @ex.Message
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }

                <!-- Tags section -->
                <div class="blog-tags mb-4">
                    @if(Model?.Tags != null)
                    {
                        foreach (var tag in Model.Tags)
                        {
                            <partial name="_Tag" model="tag" />
                        }
                    }
                </div>

                <!-- Reactions section -->
                <div class="blog-reactions mt-4 d-flex gap-2">
                    <button id="like-button" class="btn @(userReaction?.IsLike == true ? "btn-primary" : "btn-outline-primary")" 
                            onclick="addReaction(@(Model?.PostId ?? 0), true)">
                        <i class="bi bi-hand-thumbs-up"></i> <span id="likes-count">Beğen (@likesCount)</span>
                    </button>
                    <button id="dislike-button" class="btn @(userReaction?.IsLike == false ? "btn-danger" : "btn-outline-danger")" 
                            onclick="addReaction(@(Model?.PostId ?? 0), false)">
                        <i class="bi bi-hand-thumbs-down"></i> <span id="dislikes-count">Beğenme (@dislikesCount)</span>
                    </button>
                </div>

                <!-- Comments section -->
                <div class="comments-section mt-5">
                    <h4 class="mb-3">Yorumlar (<span id="comments-count">@(Model?.Comments?.Count ?? 0)</span>)</h4>

                    <div id="commentsList">
                        @if(Model?.Comments != null)
                        {
                            foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                            {
                                var commentUserReaction = comment.Reactions?.FirstOrDefault(r => r.UserId == userId);
                                var commentLikes = comment.Reactions?.Count(r => r.IsLike) ?? 0;
                                var commentDislikes = comment.Reactions?.Count(r => !r.IsLike) ?? 0;
                                
                                // Kullanıcı bilgileri - düzeltilmiş
                                var commentUserImageUrl = comment.User?.Image ?? "/img/profiles/default.jpg";
                                var commentUserName = comment.User?.UserName ?? "Bilinmeyen Kullanıcı";
                                
                                <div class="comment mb-3" id="comment-@comment.CommentId">
                                    <div class="d-flex">
                                        <img src="@commentUserImageUrl" 
                                             class="rounded-circle me-2" 
                                             style="width: 40px; height: 40px; object-fit: cover;" 
                                             alt="@commentUserName">
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between">
                                                <h6 class="mb-1">
                                                    <a href="/users/@commentUserName" class="text-decoration-none">
                                                        @commentUserName
                                                    </a>
                                                </h6>
                                                <small class="text-muted">@comment.CreatedAt.ToString("dd MMM yyyy HH:mm")</small>
                                            </div>
                                            <p class="mb-1">@comment.Content</p>
                                            <div class="d-flex align-items-center gap-2">
                                                <button class="btn btn-sm @(commentUserReaction?.IsLike == true ? "btn-primary" : "btn-outline-primary")" 
                                                        onclick="addCommentReaction(@comment.CommentId, true)">
                                                    <i class="bi bi-hand-thumbs-up"></i> 
                                                    <span class="likes-count">@commentLikes</span>
                                                </button>
                                                <button class="btn btn-sm @(commentUserReaction?.IsLike == false ? "btn-danger" : "btn-outline-danger")" 
                                                        onclick="addCommentReaction(@comment.CommentId, false)">
                                                    <i class="bi bi-hand-thumbs-down"></i>
                                                    <span class="dislikes-count">@commentDislikes</span>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary" onclick="showReplyForm(@comment.CommentId)">
                                                    <i class="bi bi-reply"></i> Yanıtla
                                                </button>
                                                @if (userId == comment.UserId)
                                                {
                                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteComment(@comment.CommentId)">
                                                        <i class="bi bi-trash"></i> Sil
                                                    </button>
                                                }
                                            </div>
                                            <div id="reply-form-@comment.CommentId" class="mt-2 d-none">
                                                <form class="reply-form">
                                                    @Html.AntiForgeryToken()
                                                    <div class="mb-2">
                                                        <textarea id="reply-content-@comment.CommentId" name="replyContent" class="form-control" rows="2" placeholder="Yanıtınızı yazın..."></textarea>
                                                    </div>
                                                    <div class="d-flex gap-2">
                                                        <button type="submit" class="btn btn-primary btn-sm">Yanıtla</button>
                                                        <button type="button" class="btn btn-secondary btn-sm" onclick="hideReplyForm(@comment.CommentId)">İptal</button>
                                                    </div>
                                                </form>
                                            </div>
                                            <div class="replies mt-2">
                                                @foreach (var reply in comment.Replies.OrderBy(r => r.CreatedAt))
                                                {
                                                    var replyUserReaction = reply.Reactions.FirstOrDefault(r => r.UserId == userId);
                                                    var replyLikes = reply.Reactions.Count(r => r.IsLike);
                                                    var replyDislikes = reply.Reactions.Count(r => !r.IsLike);
                                                    
                                                    // Kullanıcı bilgileri - düzeltilmiş
                                                    var replyUserImageUrl = string.IsNullOrEmpty(reply.User?.Image) ? "/img/profiles/default.jpg" : reply.User.Image;
                                                    var replyUserName = reply.User?.UserName ?? "Bilinmeyen Kullanıcı";
                                                    
                                                    <div class="reply ms-4 mb-2" id="comment-@reply.CommentId">
                                                        <div class="d-flex">
                                                            <img src="@replyUserImageUrl" 
                                                                 class="rounded-circle me-2" 
                                                                 style="width: 30px; height: 30px; object-fit: cover;" 
                                                                 alt="@replyUserName">
                                                            <div class="flex-grow-1">
                                                                <div class="d-flex justify-content-between">
                                                                    <h6 class="mb-1">
                                                                        <a href="/users/@replyUserName" class="text-decoration-none">
                                                                            @replyUserName
                                                                        </a>
                                                                    </h6>
                                                                    <small class="text-muted">@reply.CreatedAt.ToString("dd MMM yyyy HH:mm")</small>
                                                                </div>
                                                                <p class="mb-1">@reply.Content</p>
                                                                <div class="d-flex align-items-center gap-2">
                                                                    <button class="btn btn-sm @(replyUserReaction?.IsLike == true ? "btn-primary" : "btn-outline-primary")" 
                                                                            onclick="addCommentReaction(@reply.CommentId, true)">
                                                                        <i class="bi bi-hand-thumbs-up"></i>
                                                                        <span class="likes-count">@replyLikes</span>
                                                                    </button>
                                                                    <button class="btn btn-sm @(replyUserReaction?.IsLike == false ? "btn-danger" : "btn-outline-danger")" 
                                                                            onclick="addCommentReaction(@reply.CommentId, false)">
                                                                        <i class="bi bi-hand-thumbs-down"></i>
                                                                        <span class="dislikes-count">@replyDislikes</span>
                                                                    </button>
                                                                    @if (userId == reply.UserId)
                                                                    {
                                                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteComment(@reply.CommentId)">
                                                                            <i class="bi bi-trash"></i> Sil
                                                                        </button>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- Add comment form -->
                    @if (User.Identity != null && User.Identity.IsAuthenticated)
                    {
                        <div class="add-comment mt-4">
                            <h4 class="mb-3">Yorum Ekle</h4>
                            <form id="commentForm">
                                @Html.AntiForgeryToken()
                                <div class="mb-3">
                                    <textarea id="commentContent" name="commentContent" class="form-control" rows="3" placeholder="Yorumunuzu yazın..."></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">Gönder</button>
                            </form>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Yorum yapmak için <a href="/Users/Login">giriş yapın</a>.
                        </div>
                    }
                </div>
            </article>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // CSRF token alıcı fonksiyon
        function getToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }
        
        // Beğeni ekleme/kaldırma fonksiyonu (post)
        function addReaction(postId, isLike) {
            console.log("addReaction çağrıldı:", postId, isLike);
            
            @if (!User.Identity?.IsAuthenticated == true)
            {
                <text>
                window.location.href = '/Users/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                return;
                </text>
            }
            
            // Önce CSRF token'ı al
            const token = getToken();

            fetch('/Posts/AddReaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    postId: postId,
                    isLike: isLike
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    // Düğme stillerini güncelle
                    const likeBtn = document.getElementById('like-button');
                    const dislikeBtn = document.getElementById('dislike-button');
                    
                    if (data.action === 'added') {
                        if (isLike) {
                            likeBtn.classList.remove('btn-outline-primary');
                            likeBtn.classList.add('btn-primary');
                            dislikeBtn.classList.remove('btn-danger');
                            dislikeBtn.classList.add('btn-outline-danger');
                        } else {
                            dislikeBtn.classList.remove('btn-outline-danger');
                            dislikeBtn.classList.add('btn-danger');
                            likeBtn.classList.remove('btn-primary');
                            likeBtn.classList.add('btn-outline-primary');
                        }
                    } else if (data.action === 'removed') {
                        if (isLike) {
                            likeBtn.classList.remove('btn-primary');
                            likeBtn.classList.add('btn-outline-primary');
                        } else {
                            dislikeBtn.classList.remove('btn-danger');
                            dislikeBtn.classList.add('btn-outline-danger');
                        }
                    } else if (data.action === 'updated') {
                        if (isLike) {
                            likeBtn.classList.remove('btn-outline-primary');
                            likeBtn.classList.add('btn-primary');
                            dislikeBtn.classList.remove('btn-danger');
                            dislikeBtn.classList.add('btn-outline-danger');
                        } else {
                            dislikeBtn.classList.remove('btn-outline-danger');
                            dislikeBtn.classList.add('btn-danger');
                            likeBtn.classList.remove('btn-primary');
                            likeBtn.classList.add('btn-outline-primary');
                        }
                    }
                    
                    // Update button text
                    document.getElementById('likes-count').innerText = `Beğen (${data.likesCount})`;
                    document.getElementById('dislikes-count').innerText = `Beğenme (${data.dislikesCount})`;
                } else {
                    alert(data.message || 'Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Tepki eklenirken bir hata oluştu.');
            });
        }

        // Yorum beğeni ekleme/kaldırma fonksiyonu
        function addCommentReaction(commentId, isLike) {
            console.log("addCommentReaction çağrıldı:", commentId, isLike);
            
            @if (!User.Identity?.IsAuthenticated == true)
            {
                <text>
                window.location.href = '/Users/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                return;
                </text>
            }
            
            // Önce CSRF token'ı al
            const token = getToken();
            
            // Düğmeleri devre dışı bırak
            const comment = document.getElementById(`comment-${commentId}`);
            if (!comment) {
                console.error(`Comment element not found: comment-${commentId}`);
                return;
            }
            
            const likeBtn = comment.querySelector(`button[onclick="addCommentReaction(${commentId}, true)"]`);
            const dislikeBtn = comment.querySelector(`button[onclick="addCommentReaction(${commentId}, false)"]`);
            
            if (likeBtn) likeBtn.disabled = true;
            if (dislikeBtn) dislikeBtn.disabled = true;
            
            fetch('/Posts/AddCommentReaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    commentId: commentId,
                    isLike: isLike
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    // Sayaçları güncelle
                    const likesCountElement = comment.querySelector('.likes-count');
                    const dislikesCountElement = comment.querySelector('.dislikes-count');
                    
                    if (likesCountElement && dislikesCountElement) {
                        likesCountElement.innerText = data.likesCount;
                        dislikesCountElement.innerText = data.dislikesCount;
                        
                        // Düğme stillerini güncelle
                        if (likeBtn && dislikeBtn) {
                            if (data.action === 'added') {
                                if (isLike) {
                                    likeBtn.classList.remove('btn-outline-primary');
                                    likeBtn.classList.add('btn-primary');
                                    dislikeBtn.classList.remove('btn-danger');
                                    dislikeBtn.classList.add('btn-outline-danger');
                                } else {
                                    dislikeBtn.classList.remove('btn-outline-danger');
                                    dislikeBtn.classList.add('btn-danger');
                                    likeBtn.classList.remove('btn-primary');
                                    likeBtn.classList.add('btn-outline-primary');
                                }
                            } else if (data.action === 'removed') {
                                if (isLike) {
                                    likeBtn.classList.remove('btn-primary');
                                    likeBtn.classList.add('btn-outline-primary');
                                } else {
                                    dislikeBtn.classList.remove('btn-danger');
                                    dislikeBtn.classList.add('btn-outline-danger');
                                }
                            } else if (data.action === 'updated') {
                                if (isLike) {
                                    likeBtn.classList.remove('btn-outline-primary');
                                    likeBtn.classList.add('btn-primary');
                                    dislikeBtn.classList.remove('btn-danger');
                                    dislikeBtn.classList.add('btn-outline-danger');
                                } else {
                                    dislikeBtn.classList.remove('btn-outline-danger');
                                    dislikeBtn.classList.add('btn-danger');
                                    likeBtn.classList.remove('btn-primary');
                                    likeBtn.classList.add('btn-outline-primary');
                                }
                            }
                        }
                    } else {
                        console.error(`Like/dislike count elements not found for comment: ${commentId}`);
                    }
                } else {
                    alert(data.message || 'Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Tepki eklenirken bir hata oluştu.');
            })
            .finally(() => {
                // Düğmeleri tekrar etkinleştir
                if (likeBtn) likeBtn.disabled = false;
                if (dislikeBtn) dislikeBtn.disabled = false;
            });
        }

        // Yorum silme fonksiyonu
        function deleteComment(commentId) {
            if (!confirm('Bu yorumu silmek istediğinize emin misiniz?')) {
                return;
            }
            
            console.log("deleteComment çağrıldı:", commentId);
            
            // CSRF token'ı al
            const token = getToken();
            
            // Silme düğmesini devre dışı bırak
            const deleteBtn = document.querySelector(`button[onclick="deleteComment(${commentId})"]`);
            if (deleteBtn) deleteBtn.disabled = true;
            
            fetch('/Posts/DeleteComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    commentId: commentId
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    // Yorumu sayfadan kaldır
                    const comment = document.getElementById(`comment-${commentId}`);
                    if (comment) {
                        // Eğer yanıt ise, sadece yanıtı kaldır
                        if (comment.classList.contains('reply')) {
                            comment.remove();
                        } else {
                            // Ana yorum ise, tüm yanıtlarıyla birlikte kaldır
                            comment.remove();
                        }
                        
                        // Yorum sayacını güncelle
                        const commentsCount = document.getElementById('comments-count');
                        if (commentsCount) {
                            commentsCount.textContent = parseInt(commentsCount.textContent) - 1;
                        }
                    }
                } else {
                    alert(data.message || 'Bir hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Yorum silinirken bir hata oluştu.');
            })
            .finally(() => {
                // Silme düğmesini tekrar etkinleştir
                if (deleteBtn) deleteBtn.disabled = false;
            });
        }

        // Yanıt formunu göster/gizle
        function showReplyForm(commentId) {
            const replyForm = document.getElementById(`reply-form-${commentId}`);
            if (replyForm) {
                replyForm.classList.remove('d-none');
            }
        }

        function hideReplyForm(commentId) {
            const replyForm = document.getElementById(`reply-form-${commentId}`);
            if (replyForm) {
                replyForm.classList.add('d-none');
                replyForm.querySelector('textarea').value = '';
            }
        }

        // Yorum ekle
        document.getElementById('commentForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            
            @if (!User.Identity?.IsAuthenticated == true)
            {
                <text>
                window.location.href = '/Users/Login';
                return;
                </text>
            }
            
            const content = document.getElementById('commentContent').value;
            
            if (!content || content.trim() === '') {
                alert('Lütfen bir yorum yazın');
                return;
            }

            const token = getToken();
            if (!token) {
                console.error("CSRF token not found");
                alert('Güvenlik doğrulaması başarısız oldu.');
                return;
            }

            // Yorum gönderme butonunu devre dışı bırak
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.textContent = 'Gönderiliyor...';

            fetch('/Posts/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    postId: @(Model?.PostId ?? 0),
                    content: content.trim()
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Sunucu hatası: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    // Yorum formunu temizle
                    document.getElementById('commentContent').value = '';
                    
                    // Yeni yorumu sayfaya ekle
                    const commentsList = document.getElementById('commentsList');
                    
                    const newCommentHTML = `
                        <div class="comment mb-3" id="comment-${data.commentId}">
                            <div class="d-flex">
                                <img src="${data.userImage || '/img/profiles/default.jpg'}" 
                                     class="rounded-circle me-2" 
                                     style="width: 40px; height: 40px; object-fit: cover;" 
                                     alt="${data.userName}">
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="mb-1"><a href="/users/${data.userName}" class="text-decoration-none">${data.userName}</a></h6>
                                        <small class="text-muted">${data.formattedDate}</small>
                                    </div>
                                    <p class="mb-1">${data.content}</p>
                                    <div class="d-flex align-items-center gap-2">
                                        <button class="btn btn-sm btn-outline-primary" 
                                                onclick="addCommentReaction(${data.commentId}, true)">
                                            <i class="bi bi-hand-thumbs-up"></i> 
                                            <span class="likes-count">0</span>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                onclick="addCommentReaction(${data.commentId}, false)">
                                            <i class="bi bi-hand-thumbs-down"></i>
                                            <span class="dislikes-count">0</span>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="showReplyForm(${data.commentId})">
                                            <i class="bi bi-reply"></i> Yanıtla
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteComment(${data.commentId})">
                                            <i class="bi bi-trash"></i> Sil
                                        </button>
                                    </div>
                                    <div id="reply-form-${data.commentId}" class="mt-2 d-none">
                                        <form class="reply-form">
                                            <div class="mb-2">
                                                <textarea class="form-control" rows="2" placeholder="Yanıtınızı yazın..."></textarea>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <button type="submit" class="btn btn-primary btn-sm">Yanıtla</button>
                                                <button type="button" class="btn btn-secondary btn-sm" onclick="hideReplyForm(${data.commentId})">İptal</button>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="replies mt-2"></div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Yeni yorumu listenin en üstüne ekle
                    commentsList.insertAdjacentHTML('afterbegin', newCommentHTML);
                    
                    // Yorum sayacını güncelle
                    const commentsCount = document.getElementById('comments-count');
                    commentsCount.textContent = parseInt(commentsCount.textContent) + 1;
                    
                    // Yeni eklenen yorumun yanıt formunu yapılandır
                    const replyForm = document.querySelector(`#comment-${data.commentId} .reply-form`);
                    if (replyForm) {
                        replyForm.addEventListener('submit', replySubmitHandler);
                    }
                } else {
                    alert(data.message || 'Bir hata oluştu');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('İşlem sırasında bir hata oluştu.');
            })
            .finally(() => {
                // Butonu normal haline getir
                submitButton.disabled = false;
                submitButton.textContent = 'Gönder';
            });
        });

        // Yanıt gönderme işleyicisi
        function replySubmitHandler(e) {
            e.preventDefault();
            
            @if (!User.Identity?.IsAuthenticated == true)
            {
                <text>
                window.location.href = '/Users/Login';
                return;
                </text>
            }
            
            const commentId = this.closest('.comment').id.split('-')[1];
            const content = this.querySelector('textarea[name="replyContent"]').value;
            
            if (!content || content.trim() === '') {
                alert('Lütfen bir yanıt yazın');
                return;
            }

            const token = getToken();
            if (!token) {
                console.error("CSRF token not found");
                alert('Güvenlik doğrulaması başarısız oldu.');
                return;
            }

            // Yanıt gönderme butonunu devre dışı bırak
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.textContent = 'Gönderiliyor...';

            fetch('/Posts/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify({
                    postId: @(Model?.PostId ?? 0),
                    content: content.trim(),
                    parentCommentId: parseInt(commentId)
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Sunucu hatası: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    // Yanıtı sayfaya ekle
                    const parentComment = document.getElementById(`comment-${commentId}`);
                    const repliesContainer = parentComment.querySelector('.replies');
                    
                    const replyHTML = `
                        <div class="reply ms-4 mb-2" id="comment-${data.commentId}">
                            <div class="d-flex">
                                <img src="${data.userImage || '/img/profiles/default.jpg'}" 
                                     class="rounded-circle me-2" 
                                     style="width: 30px; height: 30px; object-fit: cover;" 
                                     alt="${data.userName}">
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="mb-1"><a href="/users/${data.userName}" class="text-decoration-none">${data.userName}</a></h6>
                                        <small class="text-muted">${data.formattedDate}</small>
                                    </div>
                                    <p class="mb-1">${data.content}</p>
                                    <div class="d-flex align-items-center gap-2">
                                        <button class="btn btn-sm btn-outline-primary" 
                                                onclick="addCommentReaction(${data.commentId}, true)">
                                            <i class="bi bi-hand-thumbs-up"></i>
                                            <span class="likes-count">0</span>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                onclick="addCommentReaction(${data.commentId}, false)">
                                            <i class="bi bi-hand-thumbs-down"></i>
                                            <span class="dislikes-count">0</span>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteComment(${data.commentId})">
                                            <i class="bi bi-trash"></i> Sil
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    repliesContainer.insertAdjacentHTML('beforeend', replyHTML);
                    
                    // Yorum sayacını güncelle
                    const commentsCount = document.getElementById('comments-count');
                    commentsCount.textContent = parseInt(commentsCount.textContent) + 1;
                    
                    // Yanıt formunu gizle ve temizle
                    hideReplyForm(commentId);
                } else {
                    alert(data.message || 'Bir hata oluştu');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('İşlem sırasında bir hata oluştu.');
            })
            .finally(() => {
                // Butonu normal haline getir
                submitButton.disabled = false;
                submitButton.textContent = 'Yanıtla';
            });
        }

        // Tüm yanıt formlarına event listener ekle
        document.querySelectorAll('.reply-form').forEach(form => {
            form.addEventListener('submit', replySubmitHandler);
        });
    </script>

    <!-- MathJax script for LaTeX rendering -->
    <script src="~/js/post-view.js"></script>
} 