@using System.Security.Claims
@model BlogApp.Entity.Post
@using BlogApp.Entity

@{
    ViewData["Title"] = Model?.Title ?? "Blog Yazısı";
    ViewData["Description"] = Model?.Description;
    if (!string.IsNullOrEmpty(Model?.Image))
    {
        ViewData["OgImage"] = Model.Image;
    }

    var userId = User.Identity?.IsAuthenticated == true ? int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "0") : 0;
    var userReaction = Model?.Reactions?.FirstOrDefault(r => r.UserId == userId);
    var likesCount = Model?.Reactions?.Count(r => r.IsLike) ?? 0;
    var dislikesCount = Model?.Reactions?.Count(r => !r.IsLike) ?? 0;
}

<div class="container">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-8 mx-auto">
            <article class="blog-post">
                <header class="mb-4">
                    <h1 class="display-4 mb-3">@Model.Title</h1>
                    <div class="d-flex align-items-center text-muted mb-3">
                        <img src="@(string.IsNullOrEmpty(Model.User.Image) ? "/img/profiles/default.jpg" : Model.User.Image)" 
                             class="rounded-circle me-2" 
                             style="width: 40px; height: 40px; object-fit: cover;" 
                             alt="@Model.User.UserName">
                        <div>
                            <div>
                                <a href="/users/@Model.User.UserName" class="text-decoration-none">
                                    @Model.User.UserName
                                    @if (Model.User.IsAdmin)
                                    {
                                        <i class="bi bi-patch-check-fill text-primary" title="Admin"></i>
                                    }
                                </a>
                            </div>
                            <small>@Model.CreatedAt.ToString("dd MMMM yyyy")</small>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Image))
                    {
                        <img src="@Model.Image" class="img-fluid rounded mb-4" alt="@Model.Title">
                    }
                </header>

                <div class="blog-content mb-4">
                    @Html.Raw(Model.Content)
                </div>

                <div class="blog-tags mb-4">
                    @foreach (var tag in Model.Tags)
                    {
                        string tagColor = "secondary";
                        string textClass = "text-white";
                        
                        if (tag.Color.HasValue)
                        {
                            switch(tag.Color.Value)
                            {
                                case TagColors.Primary: tagColor = "primary"; break;
                                case TagColors.Success: tagColor = "success"; break;
                                case TagColors.Danger: tagColor = "danger"; break;
                                case TagColors.Warning: tagColor = "warning"; textClass = "text-dark"; break;
                                case TagColors.Info: tagColor = "info"; textClass = "text-dark"; break;
                                case TagColors.Orange: tagColor = "orange"; break;
                                case TagColors.Dark: tagColor = "dark"; break;
                                default: tagColor = "secondary"; break;
                            }
                        }
                        
                        @if (tag.Color.HasValue && tag.Color.Value == TagColors.Info)
                        {
                            <a href="/tags/@tag.Url" class="badge text-dark text-decoration-none me-2" style="background-color: #0dcaf0 !important;">@tag.Name</a>
                        }
                        else
                        {
                            <a href="/tags/@tag.Url" class="badge bg-@tagColor @textClass text-decoration-none me-2">@tag.Name</a>
                        }
                    }
                </div>

                <div class="blog-reactions mb-4">
                    <div class="d-flex align-items-center">
                        <button class="btn @(userReaction?.IsLike == true ? "btn-primary" : "btn-outline-primary") me-2" onclick="addReaction(@Model.PostId, true)">
                            <i class="bi bi-hand-thumbs-up"></i> Beğen (@likesCount)
                        </button>
                        <button class="btn @(userReaction?.IsLike == false ? "btn-danger" : "btn-outline-danger")" onclick="addReaction(@Model.PostId, false)">
                            <i class="bi bi-hand-thumbs-down"></i> Beğenme (@dislikesCount)
                        </button>
                    </div>
                </div>

                <div class="blog-comments">
                    <h3 class="mb-4">Yorumlar</h3>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <form id="commentForm" class="mb-4">
                            <div class="mb-3">
                                <textarea class="form-control" id="commentContent" rows="3" placeholder="Yorumunuzu yazın..."></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Yorum Yap</button>
                        </form>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Yorum yapabilmek için <a href="/Users/Login">giriş yapın</a> veya <a href="/Users/Register">kayıt olun</a>.
                        </div>
                    }

                    <div id="commentsList">
                        @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="comment mb-3">
                                <div class="d-flex">
                                    <img src="@(string.IsNullOrEmpty(comment.User.Image) ? "/img/profiles/default.jpg" : comment.User.Image)" 
                                         class="rounded-circle me-2" 
                                         style="width: 40px; height: 40px; object-fit: cover;" 
                                         alt="@comment.User.UserName">
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between">
                                            <h6 class="mb-1"><a href="/users/@comment.User.UserName" class="text-decoration-none">@comment.User.UserName</a></h6>
                                            <small class="text-muted">@comment.CreatedAt.ToString("dd MMM yyyy HH:mm")</small>
                                        </div>
                                        <p class="mb-1">@comment.Content</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </article>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function addReaction(postId, isLike) {
            @if (!User.Identity.IsAuthenticated)
            {
                <text>
                window.location.href = '/Users/Login';
                return;
                </text>
            }

            fetch('/Posts/AddReaction', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    postId: postId,
                    isLike: isLike
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Bir hata oluştu');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu');
            });
        }

        document.getElementById('commentForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = document.getElementById('commentContent').value;
            
            if (!content || content.trim() === '') {
                alert('Lütfen bir yorum yazın');
                return;
            }

            fetch('/Posts/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    postId: @Model.PostId,
                    content: content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Bir hata oluştu');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Bir hata oluştu');
            });
        });
    </script>
} 